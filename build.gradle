plugins {
    id 'java'
    id 'scala'
}

group = 'org.tablichka'
version = '0.1'

subprojects {
    repositories {
        mavenCentral()
        maven {
            name = 'papermc-repo'
            url = 'https://papermc.io/repo/repository/maven-public/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public/'
        }
        maven {
            name = 'spigot-repo'
            url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name = 'CodeMC'
            url = 'https://repo.codemc.org/repository/maven-public/'
        }
        maven {
            name = 'lumine-repo'
            url = 'https://mvn.lumine.io/repository/maven-public/'
        }
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url "https://repo.dmulloy2.net/repository/public/"
        }
    }
}

// Добавьте сюда строку чтобы сконфигурировать подпроект, а чтобы зарегистрировать напишите его в settings.gradle
def tabSubprojects = ["Entities", "Discs", "WayStones"]

def libraries = ["Misc", "EntityRegistry", "DiscRegistry"]

// Билд, деплой в .server/plugins/, запуск сервера. (Ядро Airplane)
tasks.register("test-plugin", JavaExec) {
    it.dependsOn(":jar")
    it.workingDir = file("$rootDir/.server")
    it.classpath = files("$rootDir/.server/launcher-airplane.jar")
    it.jvmArgs("-javaagent:$rootDir/.server/launcher-airplane.jar", "-Xmx1G", "-Xms1G")
    // Закомментируйте чтобы включить GUI сервера.
    it.args("nogui")
    it.main("io.papermc.paperclip.Paperclip")
}

// Чистый запуск сервера без ребилда всех плагинов.
tasks.register("test-plugin-no-rebuild", JavaExec) {
    it.workingDir = file("$rootDir/.server")
    it.classpath = files("$rootDir/.server/launcher-airplane.jar")
    it.jvmArgs("-javaagent:$rootDir/.server/launcher-airplane.jar", "-Xmx1G", "-Xms1G")
    // Закомментируйте чтобы включить GUI сервера.
    it.args("nogui")
    it.main("io.papermc.paperclip.Paperclip")
}

// регистрирование подпроектов
tabSubprojects.forEach( pr -> project(":$pr") {
    apply plugin: 'java-library'

    sourceSets {
        main {
            java.srcDirs = ["$projectDir/main/java"]
            resources.srcDirs = ["$projectDir/main/resources"]
        }

        test {
            java.srcDirs = ["$projectDir/test/java"]
            resources.srcDirs = ["$projectDir/test/resources"]
        }
    }

    dependencies {
        implementation project(':Libraries:Misc')
        implementation 'org.jetbrains:annotations:22.0.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.8.1'
        compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
        switch (pr) {
            case "Entities": {
                compileOnly 'com.ticxo.modelengine:api:R2.2.0'
                implementation group: 'io.projectreactor', name: 'reactor-core', version: '3.4.12'
                implementation project(":Libraries:EntityRegistry")
                // Tests
                testImplementation 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
                return
            }
            case "Discs": {
                implementation project(":Libraries:DiscRegistry")
                return
            }
            case "WayStones": {
//                compileOnly files("$rootDir/.sources/patched_1.17.1.jar")
                compileOnly 'com.github.LoneDev6:api-itemsadder:2.4.21'
                compileOnly 'com.comphenix.protocol:ProtocolLib:4.7.0'
//                implementation('mysql:mysql-connector-java:8.0.25') {
//                    exclude module: 'protobuf-java'
//                }
                implementation 'net.wesjd:anvilgui:1.5.3-SNAPSHOT'
                return
            }
            default: return
        }
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        }
        destinationDir = file("$rootDir/.server/plugins")
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }
})

// Регистрация проектовых библиотек
libraries.forEach(lib -> project(":Libraries:$lib") {
    apply plugin: 'java-library'
    apply plugin: 'scala'

    sourceSets {
        main {
            java.srcDirs = ["$projectDir/main/java"]
            scala.srcDirs = ["$projectDir/main/scala"]
            resources.srcDirs = ["$projectDir/main/resources"]
        }

        test {
            java.srcDirs = ["$projectDir/test/java"]
            resources.srcDirs = ["$projectDir/test/resources"]
        }
    }

    dependencies {
        implementation 'org.jetbrains:annotations:22.0.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
        testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.8.1'
        compileOnly 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
        switch (lib) {
            case "Misc": {
                compileOnly files("$rootDir/.sources/patched_1.17.1.jar")
                return
            }
            case "EntityRegistry": {
                compileOnly project(':Libraries:Misc')
                // импортирует nms прямо из папируса, конечно так публиковать джарник нелегально, но у нас приватый репо, нам можно.
                compileOnly files("$rootDir/.sources/patched_1.17.1.jar")
                compileOnly group: 'io.projectreactor', name: 'reactor-core', version: '3.4.12' // реактивность для удобства кодинга ИИ.
                compileOnly 'com.ticxo.modelengine:api:R2.2.0'
                compileOnly group: 'de.tr7zw', name: 'item-nbt-api-plugin', version: '2.8.0'

                // Tests
                compileOnly group: 'org.scala-lang', name: 'scala3-library_3', version: '3.1.0'
                testImplementation 'io.papermc.paper:paper-api:1.17.1-R0.1-SNAPSHOT'
                testImplementation group: 'io.projectreactor', name: 'reactor-core', version: '3.4.12'
                return
            }
            case "DiscRegistry": {
                compileOnly project(':Libraries:Misc')
                compileOnly files("$rootDir/.sources/patched_1.17.1.jar")
                return
            }
            default: return
        }
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }
})

jar {
    libraries.forEach( lib -> {
        dependsOn(rootProject.project(":Libraries:$lib").tasks.jar)
    })
    tabSubprojects.forEach( pr -> {
        dependsOn(rootProject.project(":$pr").tasks.jar)
    })
}

// Штучки от бумаги, не трогать!
def targetJavaVersion = 16
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}